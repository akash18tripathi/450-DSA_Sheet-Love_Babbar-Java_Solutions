import java.util.*;

class Solution {
    public boolean solve(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        boolean[][] visited = new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!visited[i][j] && dfs(matrix,i,j,matrix[i][j],n,m,visited,-1,-1))               {
                    return true;
                }
            }
        }
        return false;
    }
    public boolean dfs(int[][] matrix,int i,int j,int val,int n,int m,boolean[][] visited,int parenti,int parentj){
        if(i<0 || j<0 || i>=n || j>=m || matrix[i][j]!=val){
            return false;
        }
        if(visited[i][j]){
            return true;
        }
        visited[i][j]=true;
        boolean cycle=false;
        if(!((i+1)==parenti && j==parentj)){
            cycle = cycle || dfs(matrix,i+1,j,val,n,m,visited,i,j);
        }
        if(!(i==parenti && (j+1)==parentj)){
            cycle = cycle || dfs(matrix,i,j+1,val,n,m,visited,i,j);
        }
        if(!((i-1)==parenti && j==parentj)){
            cycle = cycle || dfs(matrix,i-1,j,val,n,m,visited,i,j);
        }
        if(!(i==parenti && (j-1)==parentj)){
            cycle = cycle || dfs(matrix,i,j-1,val,n,m,visited,i,j);
        }
        return cycle;
    }
}
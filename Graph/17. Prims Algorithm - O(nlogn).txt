static class Pair implements Comparator<Pair>{
    int cost;
    int node;
    
    Pair(int c,int n){
        this.cost = c;
        this.node = n;
    }
    Pair(){
        
    }
    @Override
    public int compare(Pair a,Pair b){
        return a.cost-b.cost;
    }
}
static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> graph) 
{
    // Add your code here
    int[] keys =new int[V];
    boolean[] taken = new boolean[V];
    int[] parent = new int[V];
    Arrays.fill(parent,-1);
    Arrays.fill(keys,Integer.MAX_VALUE);
    Arrays.fill(taken,false);
    keys[0]=0;
    PriorityQueue<Pair> pq = new PriorityQueue<>(V,new Pair());
    pq.add(new Pair(0,0));
    int sum=0;
    while(!pq.isEmpty()){
        Pair p = pq.poll();
        taken[p.node]=true;
        for(ArrayList<Integer> child: graph.get(p.node)){
            int vertex = child.get(0);
            int cost = child.get(1);
            if(!taken[vertex] && cost<keys[vertex]){
                keys[vertex] = cost;
                parent[vertex] = p.node;
                pq.add(new Pair(cost,vertex));
            }
        }
    }
    for(int i=1;i<V;i++){
        sum += keys[i];
    }
    return sum;
    
}

    class Pair{
        int x;
        int y;
        Pair(int a,int b){
            this.x = a;
            this.y = b;
        }
    }
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int N)
    {
        // Code here
        if(KnightPos[0]== TargetPos[0] && KnightPos[1]== TargetPos[1]){
            return 0;
        }
        Queue<Pair> q= new LinkedList<>();
        int[][] arr = new int[N+1][N+1];
        boolean[][] visited = new boolean[N+1][N+1];
        int[] x = {2,-2,2,-2,1,-1,1,-1};
        int[] y = {1,-1,-1,1,2,-2,-2,2};
        int count=0;
        q.add(new Pair(TargetPos[0],TargetPos[1]));
        while(!q.isEmpty()){
            int size = q.size();
            count++;
            while(size>0){
                 Pair p = q.remove();
                for(int i=0;i<8;i++){
                    if(p.x+x[i]>0 && p.y+y[i]>0 && p.x+x[i]<=N && p.y+y[i]<=N && !visited[p.x+x[i]][p.y+y[i]]){
                        arr[p.x+x[i]][p.y+y[i]]=count;
                        visited[p.x+x[i]][p.y+y[i]] = true;
                        q.add(new Pair(p.x+x[i],p.y+y[i]));
                    }
                }
                size--;
            }
        }
        return arr[KnightPos[0]][KnightPos[1]]==0?-1:arr[KnightPos[0]][KnightPos[1]];
    }
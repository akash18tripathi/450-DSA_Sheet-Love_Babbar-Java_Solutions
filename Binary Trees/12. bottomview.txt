
class QueueObj{
    Node node;
    int level;
    QueueObj(Node n,int l){
        this.node = n;
        this.level = l;
    }
}



//Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        ArrayList<Integer> li = new ArrayList<>();
        if(root==null){
            return li;
        }
        Queue<QueueObj> q = new LinkedList<>();
        q.add(new QueueObj(root,0));
        Map<Integer,Integer> mp = new TreeMap<>();
        
        while(!q.isEmpty()){
            QueueObj qobj = q.poll();
            mp.put(qobj.level,qobj.node.data);
            if(qobj.node.left!=null){
                q.add(new QueueObj(qobj.node.left,qobj.level-1));
            }
            if(qobj.node.right!=null){
                q.add(new QueueObj(qobj.node.right,qobj.level+1));
            }
        }
        
        for(Integer k: mp.keySet()){
            li.add(mp.get(k));
        }
        return li;
    }